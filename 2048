<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2048 Game</title>
    <style>
        body {
            margin: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
            font-family: 'Arial', sans-serif;
            overflow: hidden;
        }

        .container {
            text-align: center;
            padding: 20px;
        }

        h1 {
            font-size: 3rem;
            color: #333;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .score-container {
            display: flex;
            justify-content: space-between;
            width: 400px;
            margin: 0 auto 20px;
        }

        .score-box {
            background: #bbada0;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 1.2rem;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .game-container {
            background: #bbada0;
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            position: relative;
            width: 400px;
            height: 400px;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            background: #bbada0;
            width: 100%;
            height: 100%;
        }

        .cell {
            background: rgba(238, 228, 218, 0.35);
            border-radius: 8px;
        }

        .tile {
            position: absolute;
            width: 85px;
            height: 85px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2rem;
            font-weight: bold;
            color: #776e65;
            background: #eee4da;
            border-radius: 8px;
            transition: transform 0.2s ease, background 0.2s ease, color 0.2s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .tile-2 { background: #eee4da; }
        .tile-4 { background: #ede0c8; }
        .tile-8 { background: #f2b179; color: #f9f6f2; }
        .tile-16 { background: #f59563; color: #f9f6f2; }
        .tile-32 { background: #f67c5f; color: #f9f6f2; }
        .tile-64 { background: #f65e3b; color: #f9f6f2; }
        .tile-128 { background: #edcf72; color: #f9f6f2; }
        .tile-256 { background: #edcc61; color: #f9f6f2; }
        .tile-512 { background: #edc850; color: #f9f6f2; }
        .tile-1024 { background: #edc53f; color: #f9f6f2; }
        .tile-2048 { background: #edc22e; color: #f9f6f2; }

        .tile-merged {
            animation: pop 0.2s ease;
        }

        .tile-new {
            animation: appear 0.2s ease;
        }

        @keyframes pop {
            0% { transform: scale(0); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        @keyframes appear {
            0% { transform: scale(0); }
            100% { transform: scale(1); }
        }

        .game-over, .game-won {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 2rem;
            border-radius: 12px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .game-over.show, .game-won.show {
            opacity: 1;
        }

        button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1.2rem;
            background: #8f7a66;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        button:hover {
            background: #a68e7a;
        }

        @media (max-width: 500px) {
            .game-container {
                width: 300px;
                height: 300px;
            }

            .tile {
                width: 62.5px;
                height: 62.5px;
                font-size: 1.5rem;
            }

            .score-container {
                width: 300px;
            }

            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>2048</h1>
        <div class="score-container">
            <div class="score-box">スコア: <span id="score">0</span></div>
            <div class="score-box">最高スコア: <span id="best-score">0</span></div>
        </div>
        <div class="game-container">
            <div class="grid">
                <div class="cell"></div><div class="cell"></div><div class="cell"></div><div class="cell"></div>
                <div class="cell"></div><div class="cell"></div><div class="cell"></div><div class="cell"></div>
                <div class="cell"></div><div class="cell"></div><div class="cell"></div><div class="cell"></div>
                <div class="cell"></div><div class="cell"></div><div class="cell"></div><div class="cell"></div>
            </div>
            <div class="game-over">
                <div>ゲームオーバー!</div>
                <button onclick="restart()">もう一度</button>
            </div>
            <div class="game-won">
                <div>勝利! 2048達成!</div>
                <button onclick="restart()">続ける</button>
            </div>
        </div>
    </div>

    <script>
        const grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
        let score = 0;
        let bestScore = localStorage.getItem('bestScore') || 0;
        let gameOver = false;
        let won = false;

        document.getElementById('best-score').textContent = bestScore;

        function init() {
            addTile();
            addTile();
            updateGrid();
        }

        function addTile() {
            const emptyCells = [];
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (grid[i][j] === 0) emptyCells.push({ i, j });
                }
            }
            if (emptyCells.length > 0) {
                const { i, j } = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                grid[i][j] = Math.random() < 0.9 ? 2 : 4;
            }
        }

        function updateGrid() {
            document.querySelectorAll('.tile').forEach(tile => tile.remove());
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (grid[i][j] !== 0) {
                        const tile = document.createElement('div');
                        tile.className = `tile tile-${grid[i][j]} tile-new`;
                        tile.textContent = grid[i][j];
                        tile.style.left = `${j * 100 + 15 * (j + 1)}px`;
                        tile.style.top = `${i * 100 + 15 * (i + 1)}px`;
                        document.querySelector('.game-container').appendChild(tile);
                    }
                }
            }
            document.getElementById('score').textContent = score;
            if (score > bestScore) {
                bestScore = score;
                localStorage.setItem('bestScore', bestScore);
                document.getElementById('best-score').textContent = bestScore;
            }
            checkGameState();
        }

        function move(direction) {
            if (gameOver || won) return;
            let moved = false;
            const newGrid = grid.map(row => [...row]);

            if (direction === 'up') {
                for (let j = 0; j < 4; j++) {
                    let pointer = 0;
                    for (let i = 1; i < 4; i++) {
                        if (grid[i][j] !== 0) {
                            if (grid[pointer][j] === 0) {
                                grid[pointer][j] = grid[i][j];
                                grid[i][j] = 0;
                                moved = true;
                            } else if (grid[pointer][j] === grid[i][j]) {
                                grid[pointer][j] *= 2;
                                score += grid[pointer][j];
                                grid[i][j] = 0;
                                pointer++;
                                moved = true;
                            } else {
                                pointer++;
                                if (i !== pointer) {
                                    grid[pointer][j] = grid[i][j];
                                    grid[i][j] = 0;
                                    moved = true;
                                }
                            }
                        }
                    }
                }
            } else if (direction === 'down') {
                for (let j = 0; j < 4; j++) {
                    let pointer = 3;
                    for (let i = 2; i >= 0; i--) {
                        if (grid[i][j] !== 0) {
                            if (grid[pointer][j] === 0) {
                                grid[pointer][j] = grid[i][j];
                                grid[i][j] = 0;
                                moved = true;
                            } else if (grid[pointer][j] === grid[i][j]) {
                                grid[pointer][j] *= 2;
                                score += grid[pointer][j];
                                grid[i][j] = 0;
                                pointer--;
                                moved = true;
                            } else {
                                pointer--;
                                if (i !== pointer) {
                                    grid[pointer][j] = grid[i][j];
                                    grid[i][j] = 0;
                                    moved = true;
                                }
                            }
                        }
                    }
                }
            } else if (direction === 'left') {
                for (let i = 0; i < 4; i++) {
                    let pointer = 0;
                    for (let j = 1; j < 4; j++) {
                        if (grid[i][j] !== 0) {
                            if (grid[i][pointer] === 0) {
                                grid[i][pointer] = grid[i][j];
                                grid[i][j] = 0;
                                moved = true;
                            } else if (grid[i][pointer] === grid[i][j]) {
                                grid[i][pointer] *= 2;
                                score += grid[i][pointer];
                                grid[i][j] = 0;
                                pointer++;
                                moved = true;
                            } else {
                                pointer++;
                                if (j !== pointer) {
                                    grid[i][pointer] = grid[i][j];
                                    grid[i][j] = 0;
                                    moved = true;
                                }
                            }
                        }
                    }
                }
            } else if (direction === 'right') {
                for (let i = 0; i < 4; i++) {
                    let pointer = 3;
                    for (let j = 2; j >= 0; j--) {
                        if (grid[i][j] !== 0) {
                            if (grid[i][pointer] === 0) {
                                grid[i][pointer] = grid[i][j];
                                grid[i][j] = 0;
                                moved = true;
                            } else if (grid[i][pointer] === grid[i][j]) {
                                grid[i][pointer] *= 2;
                                score += grid[i][pointer];
                                grid[i][j] = 0;
                                pointer--;
                                moved = true;
                            } else {
                                pointer--;
                                if (j !== pointer) {
                                    grid[i][pointer] = grid[i][j];
                                    grid[i][j] = 0;
                                    moved = true;
                                }
                            }
                        }
                    }
                }
            }

            if (moved) {
                addTile();
                updateGrid();
            }
        }

        function checkGameState() {
            if (grid.some(row => row.includes(2048)) && !won) {
                won = true;
                document.querySelector('.game-won').classList.add('show');
            }

            let hasEmpty = false;
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    if (grid[i][j] === 0) {
                        hasEmpty = true;
                        break;
                    }
                }
            }

            let canMerge = false;
            for (let i = 0; i < 4; i++) {
                for (let j = 0; j < 3; j++) {
                    if (grid[i][j] === grid[i][j + 1] || grid[j][i] === grid[j + 1][i]) {
                        canMerge = true;
                        break;
                    }
                }
            }

            if (!hasEmpty && !canMerge) {
                gameOver = true;
                document.querySelector('.game-over').classList.add('show');
            }
        }

        function restart() {
            grid.forEach(row => row.fill(0));
            score = 0;
            gameOver = false;
            won = false;
            document.querySelector('.game-over').classList.remove('show');
            document.querySelector('.game-won').classList.remove('show');
            init();
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowUp') move('up');
            else if (e.key === 'ArrowDown') move('down');
            else if (e.key === 'ArrowLeft') move('left');
            else if (e.key === 'ArrowRight') move('right');
        });

        let touchStartX = 0;
        let touchStartY = 0;

        document.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        });

        document.addEventListener('touchend', (e) => {
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;

            if (Math.abs(dx) > Math.abs(dy)) {
                if (dx > 50) move('right');
                else if (dx < -50) move('left');
            } else {
                if (dy > 50) move('down');
                else if (dy < -50) move('up');
            }
        });

        init();
    </script>
</body>
</html>
